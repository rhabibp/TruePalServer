name: Deploy TruePal Full Stack

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Increase swapfile
      run: |
        sudo swapoff -a
        sudo fallocate -l 15G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        sudo swapon --show
    
    # =====================
    # BACKEND DEPLOYMENT
    # =====================
    
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew
    
    - name: Build backend with Gradle
      run: ./gradlew build -x test
      env:
        GRADLE_OPTS: '-Xmx2g -Dfile.encoding=UTF-8'
    
    - name: Create backend deployment package
      run: |
        mkdir -p backend-deploy
        cp build/libs/truepalserver-all.jar backend-deploy/app.jar
        
        # Create systemd service file
        cat > backend-deploy/truepal-backend.service << 'EOF'
        [Unit]
        Description=TruePal Backend Service
        After=network.target
        Wants=network.target
        
        [Service]
        Type=simple
        User=deploy
        Group=deploy
        WorkingDirectory=/opt/truepal/backend
        ExecStart=/usr/bin/java -jar /opt/truepal/backend/app.jar
        Restart=always
        RestartSec=10
        StandardOutput=append:/var/log/truepal/backend.log
        StandardError=append:/var/log/truepal/backend.log
        
        # Security settings
        NoNewPrivileges=true
        PrivateTmp=true
        
        [Install]
        WantedBy=multi-user.target
        EOF
        
        # Create startup script
        cat > backend-deploy/start.sh << 'EOF'
        #!/bin/bash
        
        echo "Setting up systemd service..."
        
        # Install systemd service
        sudo cp /opt/truepal/backend/truepal-backend.service /etc/systemd/system/
        sudo systemctl daemon-reload
        
        # Stop any existing processes
        sudo systemctl stop truepal-backend 2>/dev/null || true
        pkill -f "app.jar" || true
        sleep 3
        
        # Enable and start the service
        sudo systemctl enable truepal-backend
        sudo systemctl start truepal-backend
        
        echo "Systemd service management completed"
        
        # Exit cleanly - let the calling script handle verification
        exit 0
        EOF
        
        chmod +x backend-deploy/start.sh
        tar -czf backend-deploy.tar.gz -C backend-deploy .
    
    - name: Deploy backend to VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        source: "backend-deploy.tar.gz"
        target: "/tmp/"
    
    - name: Extract and setup backend files
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Create backend directories
          sudo mkdir -p /opt/truepal/backend
          sudo mkdir -p /var/log/truepal
          
          # Backup current backend
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          if [ -f "/opt/truepal/backend/app.jar" ]; then
            sudo cp /opt/truepal/backend/app.jar /opt/truepal/backend/app.jar.backup.$TIMESTAMP
            echo "Backend backup created"
          fi
          
          # Extract new backend
          cd /tmp
          tar -xzf backend-deploy.tar.gz -C /opt/truepal/backend/
          
          # Set permissions
          sudo chown -R deploy:deploy /opt/truepal/backend
          sudo chmod +x /opt/truepal/backend/start.sh
          sudo chown -R deploy:deploy /var/log/truepal
          
          # Ensure deploy user can manage the systemd service
          echo "deploy ALL=(ALL) NOPASSWD: /bin/systemctl start truepal-backend, /bin/systemctl stop truepal-backend, /bin/systemctl enable truepal-backend, /bin/systemctl disable truepal-backend, /bin/systemctl status truepal-backend, /bin/systemctl daemon-reload, /bin/systemctl is-active truepal-backend, /usr/bin/journalctl -u truepal-backend *, /bin/cp * /etc/systemd/system/" | sudo tee -a /etc/sudoers.d/truepal-deploy
          
          # Clean up
          rm -f /tmp/backend-deploy.tar.gz
          echo "Backend files extracted and configured"
    
    - name: Start backend service
      uses: appleboy/ssh-action@v1.0.0
      continue-on-error: true
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          echo "Starting backend application..."
          /opt/truepal/backend/start.sh
    
    - name: Verify backend service
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Wait a moment for service to fully start
          sleep 5
          
          # Verify the service is actually running (most important check)
          if sudo systemctl is-active --quiet truepal-backend; then
            echo "✅ Backend service is running successfully"
            sudo systemctl status truepal-backend --no-pager -l | head -10
          else
            echo "❌ Backend service failed to start"
            sudo journalctl -u truepal-backend -n 20 --no-pager
            exit 1
          fi
          
          echo "Backend deployment completed successfully"
    
    # =====================
    # FRONTEND DEPLOYMENT
    # =====================
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        NODE_ENV: production
    
    - name: Create frontend deployment package
      run: |
        cd frontend
        tar -czf ../frontend-deploy.tar.gz -C dist .
    
    - name: Deploy frontend to VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        source: "frontend-deploy.tar.gz"
        target: "/tmp/"
        
    - name: Install and configure frontend
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          sudo mkdir -p /var/www/truepal/backups
          
          # Backup current frontend
          if [ -d "/var/www/truepal/dist" ] && [ "$(ls -A /var/www/truepal/dist/)" ]; then
            sudo cp -r /var/www/truepal/dist /var/www/truepal/backups/dist_backup_$TIMESTAMP
            echo "Frontend backup created"
          fi
          
          # Clean and extract new frontend
          sudo rm -rf /var/www/truepal/dist
          sudo mkdir -p /var/www/truepal/dist
          
          # Extract to temporary directory first, then move
          cd /tmp
          mkdir -p frontend-temp
          echo "Extracting frontend files..."
          tar -xzf frontend-deploy.tar.gz -C frontend-temp/
          
          # Verify extraction worked
          if [ ! -f "frontend-temp/index.html" ]; then
            echo "Frontend extraction failed - index.html not found in temp directory"
            ls -la frontend-temp/
            exit 1
          fi
          
          echo "Moving files to web directory..."
          sudo cp -r frontend-temp/* /var/www/truepal/dist/
          rm -rf frontend-temp
          
          # Set permissions
          sudo chown -R www-data:www-data /var/www/truepal/dist
          sudo chmod -R 755 /var/www/truepal/dist
          sudo find /var/www/truepal/dist -type f -exec sudo chmod 644 {} \;
          
          # Verify final deployment
          if [ ! -f "/var/www/truepal/dist/index.html" ]; then
            echo "Final verification failed - index.html not found in web directory"
            echo "Contents of /var/www/truepal/dist/:"
            ls -la /var/www/truepal/dist/
            exit 1
          fi
          
          echo "Frontend files deployed successfully"
          
          # Test and reload nginx
          sudo nginx -t && sudo systemctl reload nginx
          
          # Clean up
          rm -f /tmp/frontend-deploy.tar.gz
          
          # Clean old backups (keep last 5)
          cd /var/www/truepal/backups || true
          ls -t | tail -n +6 | xargs -r sudo rm -rf
          
          echo "Frontend deployment completed"
    
    # =====================
    # POST-DEPLOYMENT TESTS
    # =====================
    
    - name: Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          echo "Running health checks..."
          sleep 15
          
          # Check backend process
          if pgrep -f "app.jar" > /dev/null; then
            echo "Backend process is running"
          else
            echo "Backend process not found"
          fi
          
          # Check backend HTTP
          if curl -f http://localhost:8080/health 2>/dev/null; then
            echo "Backend health check passed"
          else
            echo "Backend health check failed"
          fi
          
          # Check frontend files
          if [ -f "/var/www/truepal/dist/index.html" ]; then
            echo "Frontend files deployed"
          else
            echo "Frontend files missing"
          fi
          
          # Check nginx
          if sudo nginx -t 2>/dev/null; then
            echo "Nginx configuration valid"
          else
            echo "Nginx configuration error"
          fi
          
          echo ""
          echo "Full stack deployment completed!"
          echo "Frontend: http://157.180.116.88"
          echo "Backend API: http://157.180.116.88/api"